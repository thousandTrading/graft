diff --git a/internal/go_repository.bzl b/internal/go_repository.bzl
index 8dac6eb..9468e4d 100644
--- a/internal/go_repository.bzl
+++ b/internal/go_repository.bzl
@@ -281,20 +281,6 @@ def _go_repository_impl(ctx):
         if gazelle_path == None:
             gazelle_path = ctx.path(Label(_gazelle))
 
-        # ctx.attr.name is the canonical name of this repository, which contains a '~' if and only
-        # if this repository is generated by a module extension rather than an invocation in
-        # WORKSPACE.
-        is_module_extension_repo = "~" in ctx.attr.name
-        if is_module_extension_repo:
-            # TODO: In Bazel 6.3.0 and earlier, there is no way to obtain a label referencing a repo
-            # generated by an extension from within that extension. We thus have to manually
-            # construct such a label pointing to the sibling `_go_repository_config` repo created by
-            # the `go_deps` extension. All extension-generated repos have names of the form
-            # `<prefix>~<name set by the extension>`.
-            extension_repo_prefix = ctx.attr.name.rpartition("~")[0] + "~"
-            repo_config = ctx.path(Label("@@" + extension_repo_prefix + "bazel_gazelle_go_repository_config//:WORKSPACE"))
-        else:
-            repo_config = ctx.path(ctx.attr.build_config)
         cmd = [
             gazelle_path,
             "-go_repository_mode",
@@ -305,7 +291,7 @@ def _go_repository_impl(ctx):
             "-repo_root",
             ctx.path(""),
             "-repo_config",
-            repo_config,
+            ctx.path(ctx.attr.build_config),
         ]
         if ctx.attr.version:
             cmd.append("-go_repository_module_mode")
@@ -319,7 +305,10 @@ def _go_repository_impl(ctx):
             cmd.extend(["-proto", ctx.attr.build_file_proto_mode])
         if ctx.attr.build_naming_convention:
             cmd.extend(["-go_naming_convention", ctx.attr.build_naming_convention])
-        if is_module_extension_repo:
+        # ctx.attr.name is the canonical name of this repository, which contains a '~' if and only
+        # if this repository is generated by a module extension rather than an invocation in
+        # WORKSPACE.
+        if "~" in ctx.attr.name:
             cmd.append("-bzlmod")
         cmd.extend(ctx.attr.build_extra_args)
         cmd.append(ctx.path(""))
